//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StoreManagementAPI.Models.DataLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class StoreDBEntities : DbContext
    {
        public StoreDBEntities()
            : base("name=StoreDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Unit> Units { get; set; }
    
        public virtual ObjectResult<Nullable<decimal>> CreateCategory(string category_Name)
        {
            var category_NameParameter = category_Name != null ?
                new ObjectParameter("Category_Name", category_Name) :
                new ObjectParameter("Category_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("CreateCategory", category_NameParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> CreateProduct(string product_Name, Nullable<int> categoryXID, Nullable<int> unitXID, Nullable<decimal> price, Nullable<int> currencyXID)
        {
            var product_NameParameter = product_Name != null ?
                new ObjectParameter("Product_Name", product_Name) :
                new ObjectParameter("Product_Name", typeof(string));
    
            var categoryXIDParameter = categoryXID.HasValue ?
                new ObjectParameter("CategoryXID", categoryXID) :
                new ObjectParameter("CategoryXID", typeof(int));
    
            var unitXIDParameter = unitXID.HasValue ?
                new ObjectParameter("UnitXID", unitXID) :
                new ObjectParameter("UnitXID", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var currencyXIDParameter = currencyXID.HasValue ?
                new ObjectParameter("CurrencyXID", currencyXID) :
                new ObjectParameter("CurrencyXID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("CreateProduct", product_NameParameter, categoryXIDParameter, unitXIDParameter, priceParameter, currencyXIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteCategory(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteCategory", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteProduct(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteProduct", iDParameter);
        }
    
        public virtual ObjectResult<GetAllCategories_Result> GetAllCategories()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCategories_Result>("GetAllCategories");
        }
    
        public virtual ObjectResult<GetAllCurrencies_Result> GetAllCurrencies()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCurrencies_Result>("GetAllCurrencies");
        }
    
        public virtual ObjectResult<GetAllProducts_Result> GetAllProducts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllProducts_Result>("GetAllProducts");
        }
    
        public virtual ObjectResult<GetAllUnits_Result> GetAllUnits()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllUnits_Result>("GetAllUnits");
        }
    
        public virtual ObjectResult<GetCategory_Result> GetCategory(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCategory_Result>("GetCategory", iDParameter);
        }
    
        public virtual ObjectResult<GetProduct_Result> GetProduct(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProduct_Result>("GetProduct", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UpdateCategory(Nullable<int> iD, string category_Name)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var category_NameParameter = category_Name != null ?
                new ObjectParameter("Category_Name", category_Name) :
                new ObjectParameter("Category_Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UpdateCategory", iDParameter, category_NameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UpdateProduct(Nullable<int> iD, string product_Name, Nullable<int> categoryXID, Nullable<int> unitXID, Nullable<decimal> price, Nullable<int> currencyXID)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var product_NameParameter = product_Name != null ?
                new ObjectParameter("Product_Name", product_Name) :
                new ObjectParameter("Product_Name", typeof(string));
    
            var categoryXIDParameter = categoryXID.HasValue ?
                new ObjectParameter("CategoryXID", categoryXID) :
                new ObjectParameter("CategoryXID", typeof(int));
    
            var unitXIDParameter = unitXID.HasValue ?
                new ObjectParameter("UnitXID", unitXID) :
                new ObjectParameter("UnitXID", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var currencyXIDParameter = currencyXID.HasValue ?
                new ObjectParameter("CurrencyXID", currencyXID) :
                new ObjectParameter("CurrencyXID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UpdateProduct", iDParameter, product_NameParameter, categoryXIDParameter, unitXIDParameter, priceParameter, currencyXIDParameter);
        }
    }
}
